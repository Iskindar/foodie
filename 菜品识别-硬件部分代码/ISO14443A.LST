C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ISO14443A
OBJECT MODULE PLACED IN ISO14443A.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ISO14443A.C ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "reg52.h"
   2          #include "string.h"
   3          #include "main.h"
   4          #include "slrc632.h" 
   5          #include "iso14443a.h"
   6          #define FSD 64              //RC500 FIFO BUFFER SIZE
   7          extern struct TranSciveBuffer{unsigned char MfCommand;
   8                                        unsigned int  MfLength;
   9                                        unsigned char MfData[64];
  10                                       };
  11                                        
  12          /////////////////////////////////////////////////////////////////////
  13          //功    能：寻卡
  14          //参数说明: req_code[IN]:寻卡方式
  15          //                0x52 = 寻感应区内所有符合14443A标准的卡
  16          //                0x26 = 寻未进入休眠状态的卡
  17          //         pTagType[OUT]：卡片类型代码
  18          //                0x4400 = Mifare_UltraLight
  19          //                0x0400 = Mifare_One(S50)
  20          //                0x0200 = Mifare_One(S70)
  21          //                0x0800 = Mifare_Pro
  22          //                0x0403 = Mifare_ProX
  23          //                0x4403 = Mifare_DESFire
  24          //返    回: 成功返回MI_OK
  25          /////////////////////////////////////////////////////////////////////
  26          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  27          {
  28   1         char status;   
  29   1         struct TranSciveBuffer MfComData;
  30   1         struct TranSciveBuffer *pi;
  31   1         pi = &MfComData;
  32   1      
  33   1         WriteRawRC(RegChannelRedundancy,0x03);
  34   1         ClearBitMask(RegControl,0x08);
  35   1         WriteRawRC(RegBitFraming,0x07);
  36   1         SetBitMask(RegTxControl,0x03);
  37   1         PcdSetTmo(4);
  38   1         MfComData.MfCommand = PCD_TRANSCEIVE;
  39   1         MfComData.MfLength  = 1;
  40   1         MfComData.MfData[0] = req_code;
  41   1      
  42   1         status = PcdComTransceive(pi);
  43   1         
  44   1         if (!status)
  45   1         {    
  46   2              if (MfComData.MfLength != 0x10)
  47   2              {   status = MI_BITCOUNTERR;   }
  48   2         }
  49   1         *pTagType     = MfComData.MfData[0];
  50   1         *(pTagType+1) = MfComData.MfData[1];
  51   1         
  52   1         return status;
  53   1      }
  54          
  55          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 2   

  56          //防冲撞
  57          //input: g_cSNR=存放序列号(4byte)的内存单元首地址
  58          //output:status=MI_OK:成功
  59          //       得到的序列号放入指定单元
  60          /////////////////////////////////////////////////////////////////////
  61          char PcdAnticoll(unsigned char *pSnr)
  62          {
  63   1          char status ;
  64   1          unsigned char i;
  65   1          unsigned char ucBits;
  66   1          unsigned char ucBytes;
  67   1          unsigned char snr_check = 0;
  68   1          unsigned char ucCollPosition = 0;
  69   1          unsigned char ucTemp;
  70   1          unsigned char idata ucSNR[5] = {0, 0, 0, 0 ,0};
  71   1          struct TranSciveBuffer MfComData;
  72   1          struct TranSciveBuffer *pi;
  73   1          pi = &MfComData;
  74   1      
  75   1          WriteRawRC(RegDecoderControl,0x28);
  76   1          ClearBitMask(RegControl,0x08);
  77   1          WriteRawRC(RegChannelRedundancy,0x03);
  78   1          PcdSetTmo(4);
  79   1          
  80   1      
  81   1          do
  82   1          {
  83   2              ucBits = (ucCollPosition) % 8;
  84   2              if (ucBits != 0)
  85   2              {
  86   3                   ucBytes = ucCollPosition / 8 + 1;
  87   3                   WriteRawRC(RegBitFraming, (ucBits << 4) + ucBits);
  88   3              }
  89   2              else
  90   2              {
  91   3                   ucBytes = ucCollPosition / 8;
  92   3              }
  93   2              
  94   2              MfComData.MfCommand = PCD_TRANSCEIVE;
  95   2              MfComData.MfData[0] = PICC_ANTICOLL1;
  96   2              MfComData.MfData[1] = 0x20 + ((ucCollPosition / 8) << 4) + (ucBits & 0x0F);
  97   2              for (i=0; i<ucBytes; i++)
  98   2                  {
  99   3                      MfComData.MfData[i + 2] = ucSNR[i];
 100   3                  }
 101   2                  MfComData.MfLength = ucBytes + 2;
 102   2              
 103   2                  status = PcdComTransceive(pi);
 104   2              
 105   2                  ucTemp = ucSNR[(ucCollPosition / 8)];
 106   2                  if (status == MI_COLLERR)
 107   2                  {
 108   3                      for (i=0; i < 5 - (ucCollPosition / 8); i++)
 109   3                      {
 110   4                               ucSNR[i + (ucCollPosition / 8)] = MfComData.MfData[i+1];
 111   4                      }
 112   3                      ucSNR[(ucCollPosition / 8)] |= ucTemp;
 113   3                      ucCollPosition = MfComData.MfData[0];
 114   3              }
 115   2              else if (status == MI_OK)
 116   2              {
 117   3                  for (i=0; i < (MfComData.MfLength / 8); i++)
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 3   

 118   3                  {
 119   4                       ucSNR[4 - i] = MfComData.MfData[MfComData.MfLength/8 - i - 1];
 120   4                  }
 121   3                  ucSNR[(ucCollPosition / 8)] |= ucTemp;
 122   3              }
 123   2          } while (status == MI_COLLERR);
 124   1                              
 125   1                              
 126   1          if (status == MI_OK)
 127   1          {
 128   2               for (i=0; i<4; i++)
 129   2               {   
 130   3                   *(pSnr+i)  = ucSNR[i];
 131   3                   snr_check ^= ucSNR[i];
 132   3               }
 133   2               if (snr_check != ucSNR[i])
 134   2               {   status = MI_COM_ERR;    }
 135   2          }
 136   1          
 137   1          ClearBitMask(RegDecoderControl,0x20);
 138   1          return status;
 139   1      }
 140          
 141          /////////////////////////////////////////////////////////////////////
 142          //选定一张卡
 143          //input:g_cSNR=序列号
 144          /////////////////////////////////////////////////////////////////////
 145          char PcdSelect(unsigned char *pSnr,unsigned char *pSize)
 146          {
 147   1          unsigned char i;
 148   1          char status;
 149   1          unsigned char snr_check = 0;
 150   1          struct TranSciveBuffer MfComData;
 151   1          struct TranSciveBuffer *pi;
 152   1          pi = &MfComData;
 153   1      
 154   1          WriteRawRC(RegChannelRedundancy,0x0F);
 155   1          ClearBitMask(RegControl,0x08);
 156   1          PcdSetTmo(4);
 157   1          
 158   1          MfComData.MfCommand = PCD_TRANSCEIVE;
 159   1          MfComData.MfLength  = 7;
 160   1          MfComData.MfData[0] = PICC_ANTICOLL1;
 161   1          MfComData.MfData[1] = 0x70;
 162   1          for (i=0; i<4; i++)
 163   1          {
 164   2              snr_check ^= *(pSnr+i);
 165   2              MfComData.MfData[i+2] = *(pSnr+i);
 166   2          }
 167   1          MfComData.MfData[6] = snr_check;
 168   1      
 169   1          status = PcdComTransceive(pi);
 170   1          
 171   1          if (status == MI_OK)
 172   1          {
 173   2              if (MfComData.MfLength != 0x8)
 174   2              {   status = MI_BITCOUNTERR;   }
 175   2              else
 176   2              {  *pSize = MfComData.MfData[0];  }
 177   2          }
 178   1      
 179   1          return status;
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 4   

 180   1      }
 181          
 182          /////////////////////////////////////////////////////////////////////
 183          //将Mifare_One卡密钥转换为RC500接收格式
 184          //input: uncoded=6字节未转换的密钥
 185          //output:coded=12字节转换后的密钥
 186          /////////////////////////////////////////////////////////////////////
 187          /*char ChangeCodeKey(unsigned char *pUncoded,unsigned char *pCoded)
 188          {
 189             unsigned char cnt=0;
 190             unsigned char ln=0;
 191             unsigned char hn=0;
 192          
 193             for (cnt=0; cnt<6; cnt++)
 194             {
 195                ln = pUncoded[cnt] & 0x0F;
 196                hn = pUncoded[cnt] >> 4;
 197                pCoded[cnt*2+1] = (~ln<<4) | ln;
 198                pCoded[cnt*2]   = (~hn<<4) | hn;
 199             }
 200             return MI_OK;
 201          }
 202          */
 203          /*
 204          /////////////////////////////////////////////////////////////////////
 205          //将存在RC500的EEPROM中的密钥匙调入RC500的FIFO
 206          //input: startaddr=EEPROM地址
 207          /////////////////////////////////////////////////////////////////////
 208          char PcdLoadKeyE2(unsigned int startaddr)
 209          {
 210              char status;
 211              struct TranSciveBuffer MfComData;
 212              struct TranSciveBuffer *pi;
 213              pi = &MfComData;
 214          
 215              MfComData.MfCommand = PCD_LOADKEYE2;
 216              MfComData.MfLength  = 2;
 217              MfComData.MfData[0] = startaddr & 0xFF;
 218              MfComData.MfData[1] = (startaddr >> 8) & 0xFF;
 219              
 220              status = PcdComTransceive(pi);
 221              
 222              return status;
 223          }
 224          */
 225          
 226          
 227          /////////////////////////////////////////////////////////////////////
 228          //功能：将已转换格式后的密钥送到RC500的FIFO中
 229          //input:keys=密钥
 230          /////////////////////////////////////////////////////////////////////
 231          /*char PcdAuthKey(unsigned char *pKeys)
 232          {
 233              char status;
 234              struct TranSciveBuffer MfComData;
 235              struct TranSciveBuffer *pi;
 236              pi = &MfComData;
 237          
 238              PcdSetTmo(4);
 239              MfComData.MfCommand = PCD_LOADKEY;
 240              MfComData.MfLength  = 12;
 241              memcpy(&MfComData.MfData[0], pKeys, 12);    
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 5   

 242          
 243              status = PcdComTransceive(pi);
 244          
 245              return status;
 246          }
 247          */
 248          /////////////////////////////////////////////////////////////////////
 249          //功能：用存放RC500的FIFO中的密钥和卡上的密钥进行验证
 250          //input:auth_mode=验证方式,0x60:验证A密钥,0x61:验证B密钥
 251          //      block=要验证的绝对块号
 252          //      g_cSNR=序列号首地址
 253          /////////////////////////////////////////////////////////////////////
 254          /*char PcdAuthState(unsigned char auth_mode,unsigned char block,unsigned char *pSnr)
 255          {
 256              char status;
 257              struct TranSciveBuffer MfComData;
 258              struct TranSciveBuffer *pi;
 259              pi = &MfComData;
 260          
 261              WriteRawRC(RegChannelRedundancy,0x0F);
 262              PcdSetTmo(4);
 263              MfComData.MfCommand = PCD_AUTHENT1;
 264              MfComData.MfLength  = 6;
 265              MfComData.MfData[0] = auth_mode;
 266              MfComData.MfData[1] = block;
 267              memcpy(&MfComData.MfData[2], pSnr, 4);    
 268                
 269              status = PcdComTransceive(pi);
 270              if (status == MI_OK)
 271              {
 272                  if (ReadRawRC(RegSecondaryStatus) & 0x07) 
 273                  {   status = MI_BITCOUNTERR;    }
 274                  else
 275                  {
 276                       MfComData.MfCommand = PCD_AUTHENT2;
 277                       MfComData.MfLength  = 0;
 278                       status = PcdComTransceive(pi);
 279                       if (status == MI_OK)
 280                       {
 281                           if (ReadRawRC(RegControl) & 0x08)
 282                           {   status = MI_OK;   }
 283                           else
 284                           {   status = MI_AUTHERR;   }
 285                          
 286                       }
 287                   }
 288              }
 289              return status;
 290          }
 291          */
 292          /////////////////////////////////////////////////////////////////////
 293          //读mifare_one卡上一块(block)数据(16字节)
 294          //input: addr = 要读的绝对块号
 295          //output:readdata = 读出的数据
 296          /////////////////////////////////////////////////////////////////////
 297          /*char PcdRead(unsigned char addr,unsigned char *pReaddata)
 298          {
 299              char status;
 300              struct TranSciveBuffer MfComData;
 301              struct TranSciveBuffer *pi;
 302              pi = &MfComData;
 303          
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 6   

 304              PcdSetTmo(4);
 305              WriteRawRC(RegChannelRedundancy,0x0F);
 306              MfComData.MfCommand = PCD_TRANSCEIVE;
 307              MfComData.MfLength  = 2;
 308              MfComData.MfData[0] = PICC_READ;
 309              MfComData.MfData[1] = addr;
 310          
 311              status = PcdComTransceive(pi);
 312              if (status == MI_OK)
 313              {
 314                  if (MfComData.MfLength != 0x80)
 315                  {   status = MI_BITCOUNTERR;   }
 316                  else
 317                  {   memcpy(pReaddata, &MfComData.MfData[0], 16);  }
 318              }
 319              return status;
 320          }
 321          
 322          /////////////////////////////////////////////////////////////////////
 323          //写数据到卡上的一块
 324          //input:adde=要写的绝对块号
 325          //      writedata=写入数据
 326          /////////////////////////////////////////////////////////////////////
 327          char PcdWrite(unsigned char addr,unsigned char *pWritedata)
 328          {
 329              char status;
 330              struct TranSciveBuffer MfComData;
 331              struct TranSciveBuffer *pi;
 332              pi = &MfComData;
 333              
 334              PcdSetTmo(5);
 335              WriteRawRC(RegChannelRedundancy,0x07); 
 336              MfComData.MfCommand = PCD_TRANSCEIVE;
 337              MfComData.MfLength  = 2;
 338              MfComData.MfData[0] = PICC_WRITE;
 339              MfComData.MfData[1] = addr;
 340          
 341              status = PcdComTransceive(pi);
 342              if (status != MI_NOTAGERR)
 343              {
 344                  if(MfComData.MfLength != 4)
 345                  {   status=MI_BITCOUNTERR;   }
 346                  else
 347                  {
 348                     MfComData.MfData[0] &= 0x0F;
 349                     switch (MfComData.MfData[0])
 350                     {
 351                        case 0x00:
 352                           status = MI_NOTAUTHERR;
 353                           break;
 354                        case 0x0A:
 355                           status = MI_OK;
 356                           break;
 357                        default:
 358                           status = MI_CODEERR;
 359                           break;
 360                     }
 361                  }
 362              }
 363              if (status == MI_OK)
 364              {
 365                  PcdSetTmo(5);
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 7   

 366                  MfComData.MfCommand = PCD_TRANSCEIVE;
 367                  MfComData.MfLength  = 16;
 368                  memcpy(&MfComData.MfData[0], pWritedata, 16);
 369                  
 370                  status = PcdComTransceive(pi);
 371                  if (status != MI_NOTAGERR)
 372                  {
 373                      MfComData.MfData[0] &= 0x0F;
 374                      switch(MfComData.MfData[0])
 375                      {
 376                         case 0x00:
 377                            status = MI_WRITEERR;
 378                            break;
 379                         case 0x0A:
 380                            status = MI_OK;
 381                            break;
 382                         default:
 383                            status = MI_CODEERR;
 384                            break;
 385                     }
 386                  }
 387                  PcdSetTmo(4);
 388              }
 389              return status;
 390          }
 391          
 392          /////////////////////////////////////////////////////////////////////
 393          //扣款和充值
 394          //input:dd_mode=命令字,0xC0:扣款,0xC1:充值
 395          //      addr=钱包的绝对块号
 396          //      value=4字节增(减)值首地址,16进制数,低位在前
 397          /////////////////////////////////////////////////////////////////////
 398          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 399          {
 400              char status;
 401              struct TranSciveBuffer MfComData;
 402              struct TranSciveBuffer *pi;
 403              pi = &MfComData;
 404          
 405              PcdSetTmo(5);
 406              WriteRawRC(RegChannelRedundancy,0x0F);
 407              MfComData.MfCommand = PCD_TRANSCEIVE;
 408              MfComData.MfLength  = 2;
 409              MfComData.MfData[0] = dd_mode;
 410              MfComData.MfData[1] = addr;
 411          
 412              status = PcdComTransceive(pi);
 413              if (status != MI_NOTAGERR)
 414              {
 415                  if (MfComData.MfLength != 4)
 416                  {   status = MI_BITCOUNTERR;   }
 417                  else
 418                  {
 419                     MfComData.MfData[0] &= 0x0F;
 420                     switch (MfComData.MfData[0])
 421                     {
 422                        case 0x00:
 423                           status = MI_NOTAUTHERR;
 424                           break;
 425                        case 0x0A:
 426                           status = MI_OK;
 427                           break;
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 8   

 428                        case 0x01:
 429                           status = MI_VALERR;
 430                           break;
 431                        default:
 432                           status = MI_CODEERR;
 433                           break;
 434                     }
 435                  }
 436               }
 437               if (status == MI_OK)
 438               {
 439                  PcdSetTmo(5);
 440                  MfComData.MfCommand = PCD_TRANSCEIVE;
 441                  MfComData.MfLength  = 4;
 442                  pi = &MfComData;
 443                  memcpy(&MfComData.MfData[0], pValue, 4);
 444          
 445                  status = PcdComTransceive(pi);
 446                  if (status==MI_OK)
 447                  {
 448                     if (MfComData.MfLength != 4)
 449                     {   status = MI_BITCOUNTERR;   }
 450                     else
 451                     {   status = MI_OK;            }
 452                  }
 453                  else if(status == MI_NOTAGERR)
 454                  {   status = MI_OK;    }
 455                  else
 456                  {   status=MI_COM_ERR;     }
 457               }
 458               
 459               if (status == MI_OK)
 460               {
 461                  MfComData.MfCommand = PCD_TRANSCEIVE;
 462                  MfComData.MfLength  = 2;
 463                  MfComData.MfData[0] = PICC_TRANSFER;
 464                  MfComData.MfData[1] = addr;
 465                  
 466                  status = PcdComTransceive(pi);
 467                  if (status != MI_NOTAGERR)
 468                  {
 469                      if (MfComData.MfLength != 4)
 470                      {   status = MI_BITCOUNTERR;    }
 471                      else
 472                      {
 473                         MfComData.MfData[0] &= 0x0F;
 474                         switch(MfComData.MfData[0])
 475                         {
 476                            case 0x00:
 477                               status = MI_NOTAUTHERR;
 478                               break;
 479                            case 0x0a:
 480                               status = MI_OK;
 481                               break;
 482                            case 0x01:
 483                               status = MI_VALERR;
 484                               break;
 485                            default:
 486                               status = MI_CODEERR;
 487                               break;
 488                         }
 489                      }
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 9   

 490                  }
 491               }
 492               return status;
 493          }
 494          
 495          /////////////////////////////////////////////////////////////////////
 496          //将mifare_one卡一块数据调入卡缓冲区
 497          //input:addr=绝对块号
 498          /////////////////////////////////////////////////////////////////////
 499          char PcdRestore(unsigned char addr)
 500          {
 501              char status;
 502              struct TranSciveBuffer MfComData;
 503              struct TranSciveBuffer *pi;
 504              pi = &MfComData;
 505          
 506              PcdSetTmo(4);
 507              MfComData.MfCommand = PCD_TRANSCEIVE;
 508              MfComData.MfLength  = 2;
 509              MfComData.MfData[0] = PICC_RESTORE;
 510              MfComData.MfData[1] = addr;
 511          
 512              status = PcdComTransceive(pi);
 513              if (status != MI_NOTAGERR)
 514              {
 515                  if (MfComData.MfLength != 4)
 516                  {   status = MI_BITCOUNTERR;   }
 517                  else
 518                  {
 519                     MfComData.MfData[0] &= 0x0F;
 520                     switch(MfComData.MfData[0])
 521                     {
 522                        case 0x00:
 523                           status = MI_NOTAUTHERR;
 524                           break;
 525                        case 0x0A:
 526                           status = MI_OK;
 527                           break;
 528                        case 0x01:
 529                           status = MI_VALERR;
 530                           break;
 531                        default:
 532                           status = MI_CODEERR;
 533                           break;
 534                     }
 535                  }
 536               }
 537               if (status == MI_OK)
 538               {
 539                  PcdSetTmo(4);
 540                  MfComData.MfCommand = PCD_TRANSCEIVE;
 541                  MfComData.MfLength  = 4;
 542                  MfComData.MfData[0] = 0;
 543                  MfComData.MfData[1] = 0;
 544                  MfComData.MfData[2] = 0;
 545                  MfComData.MfData[3] = 0;
 546                  
 547                  status = PcdComTransceive(pi);
 548                  if (status == MI_NOTAGERR)
 549                  {   status = MI_OK;    }
 550               }
 551               return status;
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 10  

 552          }
 553          
 554          /////////////////////////////////////////////////////////////////////
 555          //将卡缓冲区中数据保存到块
 556          //input:addr=绝对块号
 557          /////////////////////////////////////////////////////////////////////
 558          char PcdTransfer(unsigned char addr)
 559          {
 560              char status;
 561              struct TranSciveBuffer MfComData;
 562              struct TranSciveBuffer *pi;
 563              pi = &MfComData;
 564          
 565              PcdSetTmo(5);
 566              MfComData.MfCommand = PCD_TRANSCEIVE;
 567              MfComData.MfLength  = 2;
 568              MfComData.MfData[0] = PICC_TRANSFER;
 569              MfComData.MfData[1] = addr;
 570          
 571              status = PcdComTransceive(pi);
 572              if (status != MI_NOTAGERR)
 573              {
 574                  if (MfComData.MfLength != 4)
 575                  {  status = MI_BITCOUNTERR;    }
 576                  else
 577                  {
 578                     MfComData.MfData[0] &= 0x0F;
 579                     switch (MfComData.MfData[0])
 580                     {
 581                        case 0x00:
 582                           status = MI_NOTAUTHERR;
 583                           break;
 584                        case 0x0A:
 585                           status = MI_OK;
 586                           break;
 587                        case 0x01:
 588                           status = MI_VALERR;
 589                           break;
 590                        default:
 591                           status = MI_CODEERR;
 592                           break;
 593                     }
 594                  }
 595               }
 596               return status;
 597          }
 598          */
 599          /////////////////////////////////////////////////////////////////////
 600          //命令卡进入休眠状态
 601          /////////////////////////////////////////////////////////////////////
 602          char PcdHalt()
 603          {
 604   1          char status = MI_OK;
 605   1          struct TranSciveBuffer MfComData;
 606   1          struct TranSciveBuffer *pi;
 607   1          pi = &MfComData;
 608   1      
 609   1          MfComData.MfCommand = PCD_TRANSCEIVE;
 610   1          MfComData.MfLength  = 2;
 611   1          MfComData.MfData[0] = PICC_HALT;
 612   1          MfComData.MfData[1] = 0;
 613   1      
C51 COMPILER V9.00   ISO14443A                                                             06/20/2013 19:36:44 PAGE 11  

 614   1          status = PcdComTransceive(pi);
 615   1          if (status)
 616   1          {
 617   2              if (status==MI_NOTAGERR || status==MI_ACCESSTIMEOUT)
 618   2              status = MI_OK;
 619   2          }
 620   1          WriteRawRC(RegCommand,PCD_IDLE);
 621   1          return status;
 622   1      }
 623          
 624          
 625          
 626          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    677    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     298
   IDATA SIZE       =   ----       5
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
