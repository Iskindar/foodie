C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SLRC632
OBJECT MODULE PLACED IN SlRc632.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SlRc632.C ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "reg52.h"
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include "main.h"
   5          #include <absacc.h>
   6          #include "slrc632.h"
   7          #include "iso15693.h" 
   8          
   9          #define FSD 64
  10          #define Gpbase                0x7F00                   //感应模块地址     P2^7
  11          #define outportb(addr,d)  XBYTE[addr]=d      //写入addr地址值D  /   绝对地址
  12          #define inportb(addr)   XBYTE[addr]       ///读出addr地址值
  13          extern struct TranSciveBuffer{unsigned char MfCommand;
  14                                        unsigned int  MfLength;
  15                                        unsigned char MfData[64];
  16                                       };
  17          
  18          
  19          
  20          
  21          
  22          
  23          
  24          unsigned char ReadRawRC(unsigned char Address)
  25          {
  26   1        return inportb(Gpbase+Address);      }
  27          
  28          
  29          void  WriteRawRC(unsigned char Address, unsigned char value)
  30          {  
  31   1        outportb(Gpbase+Address,value);
  32   1      }
  33          
  34          
  35          
  36          
  37          
  38          
  39          /////////////////////////////////////////////////////////////////////
  40          //复位并初始化RC632
  41          //注意:RC500上电后应延时500ms才能可靠初始化
  42          /////////////////////////////////////////////////////////////////////
  43          char PcdReset()
  44          {
  45   1         char status = MI_OK;
  46   1         char n = 0xFF;
  47   1         unsigned int i = 3000;
  48   1      
  49   1         RC632_CE=0;
  50   1         RC632_RST=0;
  51   1         DelayMs(100);
  52   1         RC632_RST=1;
  53   1         DelayMs(100);
  54   1         RC632_RST=0;
  55   1         DelayMs(100);
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 2   

  56   1      
  57   1         while (i!=0 && n)
  58   1         {
  59   2            n = ReadRawRC(RegCommand);
  60   2            i--;
  61   2         }
  62   1      
  63   1         if (i != 0)
  64   1         {
  65   2            WriteRawRC(RegPage,0x80);
  66   2            n = 0x80;
  67   2            while ( (i!=0) && (n&0x80) )
  68   2            {
  69   3                n = ReadRawRC(RegCommand);
  70   3                i--;
  71   3            }
  72   2            if (i==0 || (n&0xFF))
  73   2            {   status = MI_RESETERR;   }
  74   2         }
  75   1         else
  76   1         {    status = MI_RESETERR;     }
  77   1         
  78   1         if (status == MI_OK)
  79   1         {    WriteRawRC(RegPage,0x0);  }
  80   1         
  81   1         return status;
  82   1      }
  83          
  84          //////////////////////////////////////////////////////////////////////
  85          //设置RC632的工作方式 
  86          //////////////////////////////////////////////////////////////////////
  87          char PcdConfigISOType(unsigned char type)
  88          {
  89   1          if (type == '1')
  90   1         {
  91   2             ClearBitMask(RegControl,0x08);
  92   2      
  93   2             WriteRawRC(RegTxControl,0x48);
  94   2             WriteRawRC(RegCwConductance,0x3F);
  95   2             WriteRawRC(RegModConductance,0x05);       // must be measured for 15% Modulation Index
  96   2             WriteRawRC(RegCoderControl,0x2F);         // 52.97kHz, 1-256 coding
  97   2             WriteRawRC(RegModWidth,0x3F);             // Modulation width: 9.44us
  98   2             WriteRawRC(RegModWidthSOF,0x3F);          // Standard mode: 9.44us
  99   2             WriteRawRC(RegTypeBFraming,0x00);
 100   2             
 101   2             WriteRawRC(RegRxControl1,0x88);
 102   2             WriteRawRC(RegDecoderControl,0x34);
 103   2             WriteRawRC(RegBitPhase,0xcd);
 104   2             WriteRawRC(RegRxThreshold,0x88);
 105   2             WriteRawRC(RegBPSKDemControl,0);
 106   2             WriteRawRC(RegRxControl2,0x41);
 107   2             WriteRawRC(RegClockQControl,0x00);
 108   2      
 109   2             WriteRawRC(RegRxWait,0x08);
 110   2             WriteRawRC(RegChannelRedundancy,0x2C);    // Enable CRC TX/RX
 111   2             WriteRawRC(RegCRCPresetLSB,0xFF);
 112   2             WriteRawRC(RegCRCPresetMSB,0xFF);
 113   2             WriteRawRC(RegTimeSlotPeriod,0x00);
 114   2             WriteRawRC(RegMfOutSelect,0x00);         // enable SIGOUT = envelope
 115   2             WriteRawRC(RFU27,0x00);          
 116   2      
 117   2             WriteRawRC(RegFIFOLevel,0x38);
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 3   

 118   2             WriteRawRC(RegTimerClock,0x0B);
 119   2             WriteRawRC(RegTimerReload,0x00);
 120   2             WriteRawRC(RegTimerControl,0x02);         // TStopRxEnd=0,TStopRxBeg=1,
 121   2             WriteRawRC(RFU2E,0x00);
 122   2             WriteRawRC(RFU2F,0x00);
 123   2             DelayMs(1);
 124   2             PcdAntennaOn();
 125   2        }
 126   1        
 127   1         else{ return -1; }
 128   1         return MI_OK;
 129   1      }
 130          
 131          
 132          /////////////////////////////////////////////////////////////////////
 133          //置RC632寄存器位
 134          //input:reg=寄存器地址
 135          //      mask=置位值
 136          /////////////////////////////////////////////////////////////////////
 137          void SetBitMask(unsigned char reg,unsigned char mask)  
 138          {
 139   1         char tmp = 0x0;
 140   1         tmp = ReadRawRC(reg);
 141   1         WriteRawRC(reg,tmp | mask);  // set bit mask
 142   1      }
 143          
 144          /////////////////////////////////////////////////////////////////////
 145          //清RC632寄存器位
 146          //input:reg=寄存器地址
 147          //      mask=清位值
 148          /////////////////////////////////////////////////////////////////////
 149          void ClearBitMask(unsigned char reg,unsigned char mask)  
 150          {
 151   1         char tmp = 0x0;
 152   1         tmp = ReadRawRC(reg);
 153   1         WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 154   1      } 
 155          
 156          /////////////////////////////////////////////////////////////////////
 157          //设置RC632定时器
 158          //input:tmolength=设置值
 159          /////////////////////////////////////////////////////////////////////
 160          /*
 161          void PcdSetTmo(unsigned char tmoLength)
 162          {
 163             switch(tmoLength)
 164             {  
 165                case 0:                         // (0.302 ms) FWI=0
 166                   WriteRawRC(RegTimerClock,0x07); // TAutoRestart=0,TPrescale=128
 167                   WriteRawRC(RegTimerReload,0x21);// TReloadVal = 'h21 =33(dec) 
 168                   break;
 169                case 1:                         // (0.604 ms) FWI=1
 170                   WriteRawRC(RegTimerClock,0x07); // TAutoRestart=0,TPrescale=128
 171                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h41 =65(dec) 
 172                   break;
 173                case 2:                         // (1.208 ms) FWI=2
 174                   WriteRawRC(RegTimerClock,0x07); // TAutoRestart=0,TPrescale=128
 175                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 176                   break;
 177                case 3:                         // (2.416 ms) FWI=3
 178                   WriteRawRC(RegTimerClock,0x09); // TAutoRestart=0,TPrescale=4*128
 179                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h41 =65(dec) 
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 4   

 180                   break;
 181                case 4:                         // (4.833 ms) FWI=4
 182                   WriteRawRC(RegTimerClock,0x09); // TAutoRestart=0,TPrescale=4*128
 183                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 184                   break;
 185                case 5:                         // (9.666 ms) FWI=5
 186                   WriteRawRC(RegTimerClock,0x0B); // TAutoRestart=0,TPrescale=16*128
 187                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h41 =65(dec) 
 188                   break;
 189                case 6:                         // (19.33 ms) FWI=6
 190                   WriteRawRC(RegTimerClock,0x0B); // TAutoRestart=0,TPrescale=16*128
 191                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 192                   break;
 193                case 7:                         // (38.66 ms) FWI=7
 194                   WriteRawRC(RegTimerClock,0x0D); // TAutoRestart=0,TPrescale=64*128
 195                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h41 =65(dec) 
 196                   break;
 197                case 8:                         // (77.32 ms) FWI=8
 198                   WriteRawRC(RegTimerClock,0x0D); // TAutoRestart=0,TPrescale=64*128
 199                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 200                   break;
 201                case 9:                         // (154.6 ms) FWI=9
 202                   WriteRawRC(RegTimerClock,0x0F); // TAutoRestart=0,TPrescale=256*128
 203                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h41 =65(dec) 
 204                   break;
 205                case 10:                        // (309.3 ms) FWI=10
 206                   WriteRawRC(RegTimerClock,0x0F); // TAutoRestart=0,TPrescale=256*128
 207                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 208                   break;
 209                case 11:                        // (618.6 ms) FWI=11
 210                   WriteRawRC(RegTimerClock,0x13); // TAutoRestart=0,TPrescale=4096*128
 211                   WriteRawRC(RegTimerReload,0x11);// TReloadVal = 'h21 =17(dec) 
 212                   break;
 213                case 12:                        // (1.2371 s) FWI=12
 214                   WriteRawRC(RegTimerClock,0x13); // TAutoRestart=0,TPrescale=4096*128
 215                   WriteRawRC(RegTimerReload,0x21);// TReloadVal = 'h41 =33(dec) 
 216                   break;
 217                case 13:                        // (2.4742 s) FWI=13
 218                   WriteRawRC(RegTimerClock,0x13); // TAutoRestart=0,TPrescale=4096*128
 219                   WriteRawRC(RegTimerReload,0x41);// TReloadVal = 'h81 =65(dec) 
 220                   break;
 221                case 14:                        // (4.9485 s) FWI=14
 222                   WriteRawRC(RegTimerClock,0x13); // TAutoRestart=0,TPrescale=4096*128
 223                   WriteRawRC(RegTimerReload,0x81);// TReloadVal = 'h81 =129(dec) 
 224                   break;
 225                case 15:                        // (4.9485 s) FWI=14
 226                   WriteRawRC(RegTimerClock,0x9); // TAutoRestart=0,TPrescale=4096*128
 227                   WriteRawRC(RegTimerReload,0x0ff);// TReloadVal = 'h81 =129(dec) 
 228                   break;
 229                default:                       // 
 230                   WriteRawRC(RegTimerClock,0x19); // TAutoRestart=0,TPrescale=128
 231                   WriteRawRC(RegTimerReload,tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 232                   break;
 233             }     
 234             WriteRawRC(RegTimerControl,0X06);
 235          }
 236            */
 237          
 238          /////////////////////////////////////////////////////////////////////
 239          //  通过RC632和ISO14443卡通讯
 240          //input: pi->MfCommand = RC632命令字
 241          //       pi->MfLength  = 发送的数据长度
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 5   

 242          //       pi->MfData[]  = 发送数据
 243          //output:status        = 错误字
 244          //       pi->MfLength  = 接收的数据BIT长度
 245          //       pi->MfData[]  = 接收数据
 246          /////////////////////////////////////////////////////////////////////
 247          char ISO15693_Transceive(struct TranSciveBuffer *pi)
 248          {
 249   1         bit recebyte = 0;
 250   1         char status  = MI_COM_ERR;
 251   1         unsigned char n,waitFor,TimerReload;
 252   1         unsigned int i;
 253   1         switch (pi->MfCommand)
 254   1         {
 255   2            case PCD_TRANSMIT:
 256   2               waitFor = 0x10;
 257   2               break;
 258   2            default:
 259   2               waitFor = 0x28;
 260   2               recebyte=1;
 261   2               break;
 262   2         }
 263   1         switch (pi->MfData[1])
 264   1         {
 265   2              case ISO15693_STAY_QUIET:
 266   2                 TimerReload = 0x04;    // 2048/fc => 0x01 = 151 us 
 267   2                 break;
 268   2              case ISO15693_SELECT:
 269   2              case ISO15693_RESET_TO_READY:
 270   2             TimerReload = 0x0F;    // 2048/fc => 0x01 = 151 us 
 271   2                 break;
 272   2              case ISO15693_LOCK_AFI:
 273   2              case ISO15693_LOCK_DSFID:
 274   2              case ISO15693_LOCK_BLOCK:
 275   2              case ISO15693_WRITE_SINGLE_BLOCK:
 276   2              case ISO15693_WRITE_MULTIPLE_BLOCKS:
 277   2              case ISO15693_WRITE_AFI:
 278   2              case ISO15693_WRITE_DSFID:
 279   2                 TimerReload = 0x29;    // 2048/fc => 0x01 = 151 us 
 280   2                 break;
 281   2              case ISO15693_READ_SINGLE_BLOCK:
 282   2                 TimerReload = 0x17;    // 2048/fc => 0x01 = 151 us 
 283   2                 break;
 284   2              case ISO15693_INVENTORY:
 285   2                 TimerReload = 0x1F;    // 2048/fc => 0x01 = 151 us 
 286   2                 break;
 287   2              case ISO15693_GET_SYSTEM_INFO:
 288   2                 TimerReload = 0x25;    // 2048/fc => 0x01 = 151 us 
 289   2                 break;
 290   2              case ISO15693_GET_MULTIPLE_BLOCK_SECURITY:
 291   2                 TimerReload = 0x40;//(0x04+(cmd[cmdlen-1]+0x01))*0x02 + 0x04 + 0x01;    // 2048/fc => 0x01 = 15
             -1 us 
 292   2                 break;                             // (0x04 + cmd[cmdlen - 1])*0x02 -> Time for all receivedBytes, 0x04 -> T
             -ime bevore and after response, 0x01 additional
 293   2              case ISO15693_READ_MULTIPLE_BLOCKS:
 294   2                 TimerReload = 0x40;//(0x04+0x04*(cmd[cmdlen-1]+0x01))*0x02 + 0x04 + 0x01;    // 2048/fc => 0x01
             - = 151 us 
 295   2                 break;
 296   2              default:
 297   2                 TimerReload = 0x86; // 2048/fc => 0x01 = 151 us 
 298   2                 break;
 299   2         }
 300   1         
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 6   

 301   1         WriteRawRC(RegPage,0x00);
 302   1         WriteRawRC(RegFIFOLevel,0x1A);  
 303   1             
 304   1         SetBitMask(RegChannelRedundancy, 0x04);
 305   1         WriteRawRC(RegTimerReload, TimerReload);
 306   1         WriteRawRC(RegTimerControl, 0x06);
 307   1      
 308   1         SetBitMask(RegControl,0x01);
 309   1           
 310   1         WriteRawRC(RegCommand, 0x00);
 311   1         WriteRawRC(RegInterruptEn, 0x81);   
 312   1         WriteRawRC(RegInterruptRq, 0x3F);
 313   1         WriteRawRC(RegInterruptEn, 0x38 | 0x80);
 314   1             
 315   1         for (i=0; i<pi->MfLength; i++)
 316   1         {
 317   2             WriteRawRC(RegFIFOData,pi->MfData[i]);
 318   2         }
 319   1      
 320   1         WriteRawRC(RegCommand, PCD_TRANSCEIVE);    // start to send command to label
 321   1      
 322   1         i = 0x6500;
 323   1         do
 324   1         {
 325   2             n = ReadRawRC(RegInterruptRq);
 326   2             i--;
 327   2         }
 328   1         while ( (i!=0) && !(n&waitFor) );
 329   1            
 330   1         if (!recebyte)
 331   1         {
 332   2             if (n & 0x10) 
 333   2             {    status = MI_OK;    }
 334   2             WriteRawRC(RegInterruptEn,0x10);
 335   2             WriteRawRC(RegTimerControl,0x00);
 336   2             WriteRawRC(RegCommand,PCD_IDLE); 
 337   2             ClearBitMask(RegCoderControl, 0x80);
 338   2             return status;
 339   2         }
 340   1         else
 341   1         {
 342   2            if ((i!=0) && (n&0x08))
 343   2            {
 344   3               if ( !(ReadRawRC(RegErrorFlag) & 0x0C) )
 345   3               {
 346   4                   n = ReadRawRC(RegFIFOLength);
 347   4                   pi->MfLength = n*8;
 348   4                   for (i=0; i<n; i++)
 349   4                   {
 350   5                       pi->MfData[i] = ReadRawRC(RegFIFOData);
 351   5                   }
 352   4                   if (pi->MfData[0] == 0)
 353   4                   {   status = MI_OK;   }
 354   4               }
 355   3            }
 356   2      
 357   2            WriteRawRC(RegInterruptEn,0x10);
 358   2            WriteRawRC(RegTimerControl,0x00);
 359   2            WriteRawRC(RegCommand,PCD_IDLE); 
 360   2            ClearBitMask(RegCoderControl, 0x80);
 361   2            return status;
 362   2         }
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 7   

 363   1      }
 364          
 365          /*
 366          /////////////////////////////////////////////////////////////////////
 367          //读RC632EEPROM
 368          //input :startaddr=EEPROM地址（低位在前）
 369          //       length=读字节数
 370          //output:readdata=读出的数据
 371          /////////////////////////////////////////////////////////////////////
 372          char PcdReadE2(unsigned int startaddr,unsigned char length,unsigned char *readdata)
 373          {
 374              char status;
 375              struct TranSciveBuffer MfComData;
 376              struct TranSciveBuffer *pi;
 377              pi = &MfComData;
 378          
 379              MfComData.MfCommand = PCD_READE2;
 380              MfComData.MfLength  = 3;
 381              MfComData.MfData[0] = startaddr&0xFF;
 382              MfComData.MfData[1] = (startaddr >> 8) & 0xFF;
 383              MfComData.MfData[2] = length;
 384          
 385              status = PcdComTransceive(pi);
 386          
 387              if (status == MI_OK)
 388              {   memcpy(readdata, &MfComData.MfData[0], length);    }
 389              return status;
 390          }
 391          
 392          /////////////////////////////////////////////////////////////////////
 393          //写RC632EEPROM
 394          //input :startaddr=EEPROM地址（低位在前）
 395          //       length=写字节数
 396          //       writedata=要写入的数据
 397          /////////////////////////////////////////////////////////////////////
 398          char PcdWriteE2(unsigned int startaddr,unsigned char length,unsigned char *writedata)
 399          {
 400              char status;
 401              struct TranSciveBuffer MfComData;    
 402              struct TranSciveBuffer *pi;
 403              pi = &MfComData;
 404          
 405              MfComData.MfCommand = PCD_WRITEE2;
 406              MfComData.MfLength  = length+2;
 407              MfComData.MfData[0] = startaddr&0xFF;
 408              MfComData.MfData[1] = (startaddr >> 8) & 0xFF;
 409              memcpy(&MfComData.MfData[2], writedata, length);    
 410          
 411              status = PcdComTransceive(pi);
 412              return status;
 413          }
 414          */
 415          
 416          /////////////////////////////////////////////////////////////////////
 417          //开启天线  
 418          //每次启动或关闭天险发射之间应至少有1ms的间隔
 419          /////////////////////////////////////////////////////////////////////
 420          char PcdAntennaOn()
 421          {
 422   1          unsigned char i;
 423   1          i = ReadRawRC(RegTxControl);
 424   1          if (i & 0x03)
C51 COMPILER V9.52.0.0   SLRC632                                                           05/27/2017 16:27:44 PAGE 8   

 425   1          {   return MI_OK; }
 426   1          else
 427   1          {
 428   2              SetBitMask(RegTxControl, 0x03);
 429   2              return MI_OK;
 430   2          }
 431   1        
 432   1          
 433   1      }
 434          
 435          /////////////////////////////////////////////////////////////////////
 436          //关闭天线
 437          /////////////////////////////////////////////////////////////////////
 438          /*char PcdAntennaOff()
 439          {
 440              ClearBitMask(RegTxControl, 0x03);
 441              return MI_OK;
 442          }
 443          
 444          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    848    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
